k8  created by google

create oracle virtual box ubuntu16
Network adapter---Bridge
install docker

node is a machine in kubernetes(menions)
cluster is a set of nodesin kubernetes
master is a node which manages the cluster


master has kube-apiserver
slave  has kubelet

kubectl is used for running kubernet commands
play-with-k8s.com for kubernetes setup already done

kubeadm is a tool for setting up master and worker on different machines


pods
A pod is a single instance of an application.
Kubernetes does not deploy containers directly on workers.Instead it uses a pod
in a pod we run a single container







1 To create master
---------------------
kubeadm init --apiserver-advertise-address $(hostname -i)

To start using the cluster


  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config


  sudo chown $(id -u):$(id -g) $HOME/.kube/config


2 Initialize cluster networking:
-------------------------------

 kubectl apply -n kube-system -f \
    "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 |tr -d '\n')"

3 Copy the output of 1st command and create nodes

4 To see the list of nodes
  kubectl get nodes

==================================================================



5



5 To see the list of pods
  kubectl get pods
  or
  kubectl get pods -o wide
  shows ipaddress of pods and the node where the node  is deployed



kubectl
This deploys a docker container by creating a pod
kubectl run nginx --image nginx


1 To start nginx
 kubectl run --image=nginx nginx-app --port=80 --env="DOMAIN=cluster"

2 To see all the pods
kubectl get pods

3 To get info about pods
  kubectl describe pods

4 to start tomcat
  kubectl run --image=tomcat nginx-app --port=80  --hostPort 9090

5 To start mysql
  kubectl run --image=mysql:5 mydb --env MYSQL_ROOT_PASSWORD=intelliq

6 To go into interactive treminal
  

kubectl exec -ti nginx-app-5jyvm -- /bin/sh

To see the logs
kubectl logs -f nginx-app-zibvs

To see detailed info about the pod
kubectl describe depoyment name

To delete
kubectl delete deployment deployment_name_given_in_run_command




Creating a pod using a yml file
---------------------------------
it contians 4 top level fields
apiVersion:  version of kubernetes api that is used to create this object
kind:
metadata:
spec:


apiVersion:  version of kubernetes api that is used to create this object

Kind  :      Version
--------------------
POD:         v1
Service:     v1
ReplicasSet: apps/v1
Deployment:  apps/v1

kinds: represents the kind of kubernetes object that we are trying to create

metadata: data about the object name labe etc,This is given in form of a dictonary object


filtering of pod becomes easy if we label them in metadata

vim pod-definition.yml
apiVersion: v1

kind: Pod
metadata: 
 name: myapp-pod
 labels:
  app: myapp
  type: front-end
spec:
 containers:
  - name: nginx-containers
    image: nginx

To run the above file
kubectl create -f pod-definition.yml

To delete
kubectl delete -f pod-definition.yml

To see the list of pods
  kubectl get pods
  or
  kubectl get pods -o wide

Create kubernetes pod definition file using the below values
Name: postgres
Labels: tier =>db-tier
Container name: postgres
Image: postgres

---
apiVersion: v1
kind: Pod
metadata:
  name: postgres
  labels:
    tier: db-tier
spec:
  containers:
    - name: postgres
      image: postgres
...

To run the above file
kubectl create -f pod-definition.yml

To delete
kubectl delete -f pod-definition.yml

====================================================
apiVersion: v1
kind: Pod
metadata:
  name: mysql
  labels:
    dbname: mydb
spec:
  containers:
    - name: mydb
      image: mysql:5
      env:
       - name: MYSQL_ROOT_PASSWORD 
         value: intelliq
...

To delete
kubectl delete -f pod-definition.yml

To run the above file
kubectl create -f pod-definition.yml

Replication Controller and Replica Sets
------------------------------------------
Replication Controller:this is used for maintaining the number of pod instances in kubernetes class

Replicas Set is used for the same purpose but it the more advanced

vim rc-definition.yml
apiVersion: v1
kind: ReplicationController
metadata:
  name: nginx
spec:
  replicas: 3
  selector:
    app: nginx
  template:
    metadata:
      name: nginx
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx
        image: nginx
        ports:
        - containerPort: 80
          hostPort: 8080
:w

To run the above file
kubectl create -f rc.definition.yml

To see waht is runnign in replicationcontroller
kubectl get replicationcontroller

Tosee the list of pods
kubectl get pods


======================================
ReplicaSet

vim replicaset-definition.yml
apiVersion: apps/v1
kind: ReplicaSet
metadata:
 name: myapp-replicaset
 labels:
  app: myapp
  type: front-end
spec:
 template:
  metadata:
   name: myapp-pod
   labels:
    app: myapp
    type: front-end
   spec:
    containers:
     - name: nginx1
       image: nginx
 replicas: 3
 selector:
  matchLabels:
   type: front-end

To create the replicas with the above file
kebectl create -f replicaset-definition.yml

To get the list of replicsets
kubectl get replicaset

For detailed info about replicaset
kubectl describe replicaset

To get the list of pods
kubectl get pods

To delete a single pod
kubectl delete pod  <podname from keubectl get pods>


To see all created objects
kubectl get all


=============================
Scalling
----------
Make changes to replicas to 6
execute the below command
kubectl replace -f replicaset-definition.yml

To directly effect from command without updating the file
kubectl scal --replicas=6 -f replicasset-definition.yml


kubectl rollout status deployment.v1.apps/nginx-deployment




















kubectl apply -n kube-system -f \
    "https://cloud.weave.works/k8s/net?k8s-version=$(kubectl version | base64 |tr -d '\n')"






                          WARNING!!!!

 This is a sandbox environment. Using personal credentials
 
